// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/simple_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/shin5ok/proto-grpc-simple/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSimpleClient is a mock of SimpleClient interface.
type MockSimpleClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleClientMockRecorder
}

// MockSimpleClientMockRecorder is the mock recorder for MockSimpleClient.
type MockSimpleClientMockRecorder struct {
	mock *MockSimpleClient
}

// NewMockSimpleClient creates a new mock instance.
func NewMockSimpleClient(ctrl *gomock.Controller) *MockSimpleClient {
	mock := &MockSimpleClient{ctrl: ctrl}
	mock.recorder = &MockSimpleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleClient) EXPECT() *MockSimpleClientMockRecorder {
	return m.recorder
}

// BulkPutMessage mocks base method.
func (m *MockSimpleClient) BulkPutMessage(ctx context.Context, opts ...grpc.CallOption) (pb.Simple_BulkPutMessageClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkPutMessage", varargs...)
	ret0, _ := ret[0].(pb.Simple_BulkPutMessageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkPutMessage indicates an expected call of BulkPutMessage.
func (mr *MockSimpleClientMockRecorder) BulkPutMessage(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkPutMessage", reflect.TypeOf((*MockSimpleClient)(nil).BulkPutMessage), varargs...)
}

// GetMessage mocks base method.
func (m *MockSimpleClient) GetMessage(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessage", varargs...)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockSimpleClientMockRecorder) GetMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockSimpleClient)(nil).GetMessage), varargs...)
}

// ListMessage mocks base method.
func (m *MockSimpleClient) ListMessage(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (pb.Simple_ListMessageClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMessage", varargs...)
	ret0, _ := ret[0].(pb.Simple_ListMessageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessage indicates an expected call of ListMessage.
func (mr *MockSimpleClientMockRecorder) ListMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessage", reflect.TypeOf((*MockSimpleClient)(nil).ListMessage), varargs...)
}

// PingPong mocks base method.
func (m *MockSimpleClient) PingPong(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPong", varargs...)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPong indicates an expected call of PingPong.
func (mr *MockSimpleClientMockRecorder) PingPong(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPong", reflect.TypeOf((*MockSimpleClient)(nil).PingPong), varargs...)
}

// PutMessage mocks base method.
func (m *MockSimpleClient) PutMessage(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Name, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMessage", varargs...)
	ret0, _ := ret[0].(*pb.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMessage indicates an expected call of PutMessage.
func (mr *MockSimpleClientMockRecorder) PutMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMessage", reflect.TypeOf((*MockSimpleClient)(nil).PutMessage), varargs...)
}

// MockSimple_ListMessageClient is a mock of Simple_ListMessageClient interface.
type MockSimple_ListMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimple_ListMessageClientMockRecorder
}

// MockSimple_ListMessageClientMockRecorder is the mock recorder for MockSimple_ListMessageClient.
type MockSimple_ListMessageClientMockRecorder struct {
	mock *MockSimple_ListMessageClient
}

// NewMockSimple_ListMessageClient creates a new mock instance.
func NewMockSimple_ListMessageClient(ctrl *gomock.Controller) *MockSimple_ListMessageClient {
	mock := &MockSimple_ListMessageClient{ctrl: ctrl}
	mock.recorder = &MockSimple_ListMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimple_ListMessageClient) EXPECT() *MockSimple_ListMessageClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSimple_ListMessageClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSimple_ListMessageClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSimple_ListMessageClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSimple_ListMessageClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSimple_ListMessageClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSimple_ListMessageClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSimple_ListMessageClient) Recv() (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSimple_ListMessageClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSimple_ListMessageClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSimple_ListMessageClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSimple_ListMessageClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSimple_ListMessageClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSimple_ListMessageClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSimple_ListMessageClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSimple_ListMessageClient)(nil).Trailer))
}

// MockSimple_BulkPutMessageClient is a mock of Simple_BulkPutMessageClient interface.
type MockSimple_BulkPutMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimple_BulkPutMessageClientMockRecorder
}

// MockSimple_BulkPutMessageClientMockRecorder is the mock recorder for MockSimple_BulkPutMessageClient.
type MockSimple_BulkPutMessageClientMockRecorder struct {
	mock *MockSimple_BulkPutMessageClient
}

// NewMockSimple_BulkPutMessageClient creates a new mock instance.
func NewMockSimple_BulkPutMessageClient(ctrl *gomock.Controller) *MockSimple_BulkPutMessageClient {
	mock := &MockSimple_BulkPutMessageClient{ctrl: ctrl}
	mock.recorder = &MockSimple_BulkPutMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimple_BulkPutMessageClient) EXPECT() *MockSimple_BulkPutMessageClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockSimple_BulkPutMessageClient) CloseAndRecv() (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockSimple_BulkPutMessageClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSimple_BulkPutMessageClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSimple_BulkPutMessageClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockSimple_BulkPutMessageClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSimple_BulkPutMessageClient) Send(arg0 *pb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSimple_BulkPutMessageClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSimple_BulkPutMessageClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSimple_BulkPutMessageClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSimple_BulkPutMessageClient)(nil).Trailer))
}

// MockSimpleServer is a mock of SimpleServer interface.
type MockSimpleServer struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleServerMockRecorder
}

// MockSimpleServerMockRecorder is the mock recorder for MockSimpleServer.
type MockSimpleServerMockRecorder struct {
	mock *MockSimpleServer
}

// NewMockSimpleServer creates a new mock instance.
func NewMockSimpleServer(ctrl *gomock.Controller) *MockSimpleServer {
	mock := &MockSimpleServer{ctrl: ctrl}
	mock.recorder = &MockSimpleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleServer) EXPECT() *MockSimpleServerMockRecorder {
	return m.recorder
}

// BulkPutMessage mocks base method.
func (m *MockSimpleServer) BulkPutMessage(arg0 pb.Simple_BulkPutMessageServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkPutMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkPutMessage indicates an expected call of BulkPutMessage.
func (mr *MockSimpleServerMockRecorder) BulkPutMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkPutMessage", reflect.TypeOf((*MockSimpleServer)(nil).BulkPutMessage), arg0)
}

// GetMessage mocks base method.
func (m *MockSimpleServer) GetMessage(arg0 context.Context, arg1 *pb.Name) (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", arg0, arg1)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockSimpleServerMockRecorder) GetMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockSimpleServer)(nil).GetMessage), arg0, arg1)
}

// ListMessage mocks base method.
func (m *MockSimpleServer) ListMessage(arg0 *pb.Request, arg1 pb.Simple_ListMessageServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMessage indicates an expected call of ListMessage.
func (mr *MockSimpleServerMockRecorder) ListMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessage", reflect.TypeOf((*MockSimpleServer)(nil).ListMessage), arg0, arg1)
}

// PingPong mocks base method.
func (m *MockSimpleServer) PingPong(arg0 context.Context, arg1 *pb.Message) (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPong", arg0, arg1)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPong indicates an expected call of PingPong.
func (mr *MockSimpleServerMockRecorder) PingPong(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPong", reflect.TypeOf((*MockSimpleServer)(nil).PingPong), arg0, arg1)
}

// PutMessage mocks base method.
func (m *MockSimpleServer) PutMessage(arg0 context.Context, arg1 *pb.Message) (*pb.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMessage", arg0, arg1)
	ret0, _ := ret[0].(*pb.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMessage indicates an expected call of PutMessage.
func (mr *MockSimpleServerMockRecorder) PutMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMessage", reflect.TypeOf((*MockSimpleServer)(nil).PutMessage), arg0, arg1)
}

// MockUnsafeSimpleServer is a mock of UnsafeSimpleServer interface.
type MockUnsafeSimpleServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSimpleServerMockRecorder
}

// MockUnsafeSimpleServerMockRecorder is the mock recorder for MockUnsafeSimpleServer.
type MockUnsafeSimpleServerMockRecorder struct {
	mock *MockUnsafeSimpleServer
}

// NewMockUnsafeSimpleServer creates a new mock instance.
func NewMockUnsafeSimpleServer(ctrl *gomock.Controller) *MockUnsafeSimpleServer {
	mock := &MockUnsafeSimpleServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSimpleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSimpleServer) EXPECT() *MockUnsafeSimpleServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSimpleServer mocks base method.
func (m *MockUnsafeSimpleServer) mustEmbedUnimplementedSimpleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSimpleServer")
}

// mustEmbedUnimplementedSimpleServer indicates an expected call of mustEmbedUnimplementedSimpleServer.
func (mr *MockUnsafeSimpleServerMockRecorder) mustEmbedUnimplementedSimpleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSimpleServer", reflect.TypeOf((*MockUnsafeSimpleServer)(nil).mustEmbedUnimplementedSimpleServer))
}

// MockSimple_ListMessageServer is a mock of Simple_ListMessageServer interface.
type MockSimple_ListMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockSimple_ListMessageServerMockRecorder
}

// MockSimple_ListMessageServerMockRecorder is the mock recorder for MockSimple_ListMessageServer.
type MockSimple_ListMessageServerMockRecorder struct {
	mock *MockSimple_ListMessageServer
}

// NewMockSimple_ListMessageServer creates a new mock instance.
func NewMockSimple_ListMessageServer(ctrl *gomock.Controller) *MockSimple_ListMessageServer {
	mock := &MockSimple_ListMessageServer{ctrl: ctrl}
	mock.recorder = &MockSimple_ListMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimple_ListMessageServer) EXPECT() *MockSimple_ListMessageServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSimple_ListMessageServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSimple_ListMessageServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSimple_ListMessageServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSimple_ListMessageServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSimple_ListMessageServer) Send(arg0 *pb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSimple_ListMessageServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSimple_ListMessageServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSimple_ListMessageServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSimple_ListMessageServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSimple_ListMessageServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSimple_ListMessageServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSimple_ListMessageServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSimple_ListMessageServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSimple_ListMessageServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSimple_ListMessageServer)(nil).SetTrailer), arg0)
}

// MockSimple_BulkPutMessageServer is a mock of Simple_BulkPutMessageServer interface.
type MockSimple_BulkPutMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockSimple_BulkPutMessageServerMockRecorder
}

// MockSimple_BulkPutMessageServerMockRecorder is the mock recorder for MockSimple_BulkPutMessageServer.
type MockSimple_BulkPutMessageServerMockRecorder struct {
	mock *MockSimple_BulkPutMessageServer
}

// NewMockSimple_BulkPutMessageServer creates a new mock instance.
func NewMockSimple_BulkPutMessageServer(ctrl *gomock.Controller) *MockSimple_BulkPutMessageServer {
	mock := &MockSimple_BulkPutMessageServer{ctrl: ctrl}
	mock.recorder = &MockSimple_BulkPutMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimple_BulkPutMessageServer) EXPECT() *MockSimple_BulkPutMessageServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSimple_BulkPutMessageServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSimple_BulkPutMessageServer) Recv() (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSimple_BulkPutMessageServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockSimple_BulkPutMessageServer) SendAndClose(arg0 *emptypb.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSimple_BulkPutMessageServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSimple_BulkPutMessageServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSimple_BulkPutMessageServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSimple_BulkPutMessageServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSimple_BulkPutMessageServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSimple_BulkPutMessageServer)(nil).SetTrailer), arg0)
}
